{
	"info": {
		"_postman_id": "62a41beb-8b57-43ff-939c-ddeb4c8a05e3",
		"name": "hw4_boatsandloads",
		"description": "boats and loads",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Boat attributes",
			"item": [
				{
					"name": "add boat 201",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
								"exec": [
									"pm.environment.set(\"boat_id\", pm.response.json()[\"id\"]);",
									"",
									"pm.test(\"201 status code\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"content is valid\", function () {",
									"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey\");",
									"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yatch\");",
									"    pm.expect(pm.response.json()[\"length\"]).to.eq(99);",
									"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
									"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Odyssey\",\r\n  \"type\": \"Yatch\",\r\n  \"length\": 99\r\n}"
						},
						"url": {
							"raw": "{{app_url}}/boats",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats"
							]
						}
					},
					"response": []
				},
				{
					"name": "add boat 201 Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
								"exec": [
									"pm.environment.set(\"boat_id_2\", pm.response.json()[\"id\"]);",
									"",
									"pm.test(\"201 status code\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"content is valid\", function () {",
									"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey\");",
									"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yatch\");",
									"    pm.expect(pm.response.json()[\"length\"]).to.eq(99);",
									"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
									"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Odyssey\",\r\n  \"type\": \"Yatch\",\r\n  \"length\": 99\r\n}"
						},
						"url": {
							"raw": "{{app_url}}/boats",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats"
							]
						}
					},
					"response": []
				},
				{
					"name": "add boat 201 Copy Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
								"exec": [
									"pm.environment.set(\"boat_id_3\", pm.response.json()[\"id\"]);",
									"",
									"pm.test(\"201 status code\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"content is valid\", function () {",
									"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey\");",
									"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yatch\");",
									"    pm.expect(pm.response.json()[\"length\"]).to.eq(99);",
									"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
									"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Odyssey\",\r\n  \"type\": \"Yatch\",\r\n  \"length\": 99\r\n}"
						},
						"url": {
							"raw": "{{app_url}}/boats",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats"
							]
						}
					},
					"response": []
				},
				{
					"name": "add boat 201 Copy Copy Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
								"exec": [
									"pm.environment.set(\"boat_id_4\", pm.response.json()[\"id\"]);",
									"",
									"pm.test(\"201 status code\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"content is valid\", function () {",
									"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey\");",
									"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yatch\");",
									"    pm.expect(pm.response.json()[\"length\"]).to.eq(99);",
									"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
									"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Odyssey\",\r\n  \"type\": \"Yatch\",\r\n  \"length\": 99\r\n}"
						},
						"url": {
							"raw": "{{app_url}}/boats",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats"
							]
						}
					},
					"response": []
				},
				{
					"name": "add boat with missing attributes 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
								"exec": [
									"pm.test(\"400 status code\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"400 error message\", function () {",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Odyssey\",\r\n  \"type\": \"Yatch\"\r\n}"
						},
						"url": {
							"raw": "{{app_url}}/boats",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats"
							]
						}
					},
					"response": []
				},
				{
					"name": "get boat 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5539477a-9ff5-429b-979b-af285e94fa56",
								"exec": [
									"pm.test(\"200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"content is valid\", function () {",
									"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey\");",
									"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Yatch\");",
									"    pm.expect(pm.response.json()[\"length\"]).to.eq(99);",
									"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
									"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{boat_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boat_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get boat wiht invalid id 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5539477a-9ff5-429b-979b-af285e94fa56",
								"exec": [
									"pm.test(\"404 not found\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"pm.test(\"404 error message\", function () {",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id exists\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{invalid_boat_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{invalid_boat_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all boats 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00b996e8-52af-4a08-8ce2-22097177a90f",
								"exec": [
									"pm.test(\"200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"At least one boat exists\", function(){",
									"   pm.expect(Object.keys(pm.response.json()).length).to.be.at.least(1);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats"
							]
						}
					},
					"response": []
				},
				{
					"name": "get first page 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00b996e8-52af-4a08-8ce2-22097177a90f",
								"exec": [
									"pm.test(\"200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"At least one boat exists\", function(){",
									"   pm.expect(Object.keys(pm.response.json()).length).to.be.at.least(2);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats"
							]
						}
					},
					"response": []
				},
				{
					"name": "get second page 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00b996e8-52af-4a08-8ce2-22097177a90f",
								"exec": [
									"pm.test(\"200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"At least one boat exists\", function(){",
									"   pm.expect(Object.keys(pm.response.json()).length).to.be.at.least(1);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats?limit=3&offset=3",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats"
							],
							"query": [
								{
									"key": "limit",
									"value": "3"
								},
								{
									"key": "offset",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "edit boat 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c7a74f9c-2581-40ca-9996-ba107147f762",
								"exec": [
									"pm.test(\"200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"content is valid\", function () {",
									"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Odyssey II\");",
									"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Mega Yatch\");",
									"    pm.expect(pm.response.json()[\"length\"]).to.eq(200);",
									"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
									"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Odyssey II\",\r\n  \"type\": \"Mega Yatch\",\r\n  \"length\": 200\r\n}"
						},
						"url": {
							"raw": "{{app_url}}/boats/{{boat_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boat_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "edit boat with missing attributes 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c7a74f9c-2581-40ca-9996-ba107147f762",
								"exec": [
									"pm.test(\"400 status code\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"400 error message\", function () {",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Odyssey II\",\r\n  \"length\": 200\r\n}"
						},
						"url": {
							"raw": "{{app_url}}/boats/{{boat_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boat_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "edit boat with invalid id 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c7a74f9c-2581-40ca-9996-ba107147f762",
								"exec": [
									"pm.test(\"404 not found\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"pm.test(\"404 error message\", function () {",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id exists\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Odyssey II\",\r\n   \"type\": \"Mega Yatch\",\r\n  \"length\": 200\r\n}"
						},
						"url": {
							"raw": "{{app_url}}/boats/{{invalid_boat_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{invalid_boat_id}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "load attributes",
			"item": [
				{
					"name": "add load 201",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
								"exec": [
									"pm.environment.set(\"load_id\", pm.response.json()[\"id\"]);",
									"",
									"pm.test(\"201 status code\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"content is valid\", function () {",
									"    pm.expect(pm.response.json()[\"content\"]).to.eq(\"legos\");",
									"    pm.expect(pm.response.json()[\"delivery_date\"]).to.eq(\"01-11-1994\");",
									"    pm.expect(pm.response.json()[\"weight\"]).to.eq(5);",
									"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
									"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"content\":\"legos\",\n\t\"delivery_date\":\"01-11-1994\",\n\t\"weight\": 5\n}"
						},
						"url": {
							"raw": "{{app_url}}/loads",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"loads"
							]
						}
					},
					"response": []
				},
				{
					"name": "add load 201 Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
								"exec": [
									"pm.environment.set(\"load_id_2\", pm.response.json()[\"id\"]);",
									"",
									"pm.test(\"201 status code\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"content is valid\", function () {",
									"    pm.expect(pm.response.json()[\"content\"]).to.eq(\"legos\");",
									"    pm.expect(pm.response.json()[\"delivery_date\"]).to.eq(\"01-11-1994\");",
									"    pm.expect(pm.response.json()[\"weight\"]).to.eq(5);",
									"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
									"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"content\":\"legos\",\n\t\"delivery_date\":\"01-11-1994\",\n\t\"weight\": 5\n}"
						},
						"url": {
							"raw": "{{app_url}}/loads",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"loads"
							]
						}
					},
					"response": []
				},
				{
					"name": "add load 201 Copy Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
								"exec": [
									"pm.environment.set(\"load_id_3\", pm.response.json()[\"id\"]);",
									"",
									"pm.test(\"201 status code\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"content is valid\", function () {",
									"    pm.expect(pm.response.json()[\"content\"]).to.eq(\"legos\");",
									"    pm.expect(pm.response.json()[\"delivery_date\"]).to.eq(\"01-11-1994\");",
									"    pm.expect(pm.response.json()[\"weight\"]).to.eq(5);",
									"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
									"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"content\":\"legos\",\n\t\"delivery_date\":\"01-11-1994\",\n\t\"weight\": 5\n}"
						},
						"url": {
							"raw": "{{app_url}}/loads",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"loads"
							]
						}
					},
					"response": []
				},
				{
					"name": "add load 201 Copy Copy Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
								"exec": [
									"pm.environment.set(\"load_id_4\", pm.response.json()[\"id\"]);",
									"",
									"pm.test(\"201 status code\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"content is valid\", function () {",
									"    pm.expect(pm.response.json()[\"content\"]).to.eq(\"legos\");",
									"    pm.expect(pm.response.json()[\"delivery_date\"]).to.eq(\"01-11-1994\");",
									"    pm.expect(pm.response.json()[\"weight\"]).to.eq(5);",
									"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
									"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"content\":\"legos\",\n\t\"delivery_date\":\"01-11-1994\",\n\t\"weight\": 5\n}"
						},
						"url": {
							"raw": "{{app_url}}/loads",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"loads"
							]
						}
					},
					"response": []
				},
				{
					"name": "add load with missing attributes 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
								"exec": [
									"pm.test(\"400 status code\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"400 error message\", function () {",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"content\":\"legos\",\n\t\"delivery_date\":\"01-11-1994\"\n}"
						},
						"url": {
							"raw": "{{app_url}}/loads",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"loads"
							]
						}
					},
					"response": []
				},
				{
					"name": "get load 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5539477a-9ff5-429b-979b-af285e94fa56",
								"exec": [
									"pm.test(\"200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"content is valid\", function () {",
									"    pm.expect(pm.response.json()[\"content\"]).to.eq(\"legos\");",
									"    pm.expect(pm.response.json()[\"delivery_date\"]).to.eq(\"01-11-1994\");",
									"    pm.expect(pm.response.json()[\"weight\"]).to.eq(5);",
									"    const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
									"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/loads/{{load_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"loads",
								"{{load_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get load with invalid id 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5539477a-9ff5-429b-979b-af285e94fa56",
								"exec": [
									"pm.test(\"404 not found\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"pm.test(\"404 error message\", function () {",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No load with this load_id exists\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/loads/{{invalid_boat_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"loads",
								"{{invalid_boat_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all loads 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00b996e8-52af-4a08-8ce2-22097177a90f",
								"exec": [
									"pm.test(\"200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"At least one boat exists\", function(){",
									"   pm.expect(Object.keys(pm.response.json()).length).to.be.at.least(1);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/loads",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"loads"
							]
						}
					},
					"response": []
				},
				{
					"name": "get first page 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00b996e8-52af-4a08-8ce2-22097177a90f",
								"exec": [
									"pm.test(\"200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"At least one boat exists\", function(){",
									"   pm.expect(Object.keys(pm.response.json()).length).to.be.at.least(1);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/loads",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"loads"
							]
						}
					},
					"response": []
				},
				{
					"name": "get second page 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00b996e8-52af-4a08-8ce2-22097177a90f",
								"exec": [
									"pm.test(\"200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"At least one boat exists\", function(){",
									"   pm.expect(Object.keys(pm.response.json()).length).to.be.at.least(1);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/loads?limit=3&offset=3",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"loads"
							],
							"query": [
								{
									"key": "limit",
									"value": "3"
								},
								{
									"key": "offset",
									"value": "3"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "boat and load attributes",
			"item": [
				{
					"name": "put load on boat",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ea14ceb7-31f4-48fd-9565-55c36d26ddce",
								"exec": [
									"pm.test(\"204 status code\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{app_url}}/loads/{{load_id}}/boats/{{boat_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"loads",
								"{{load_id}}",
								"boats",
								"{{boat_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "put load on fake boat",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ea14ceb7-31f4-48fd-9565-55c36d26ddce",
								"exec": [
									"pm.test(\"404 status code\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{app_url}}/loads/{{load_id}}/boats/{{invalid_boat_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"loads",
								"{{load_id}}",
								"boats",
								"{{invalid_boat_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "put fake load on boat",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ea14ceb7-31f4-48fd-9565-55c36d26ddce",
								"exec": [
									"pm.test(\"404 status code\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{app_url}}/loads/{{invalid_boat_id}}/boats/{{invalid_boat_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"loads",
								"{{invalid_boat_id}}",
								"boats",
								"{{invalid_boat_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "put same load on another boat (error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ea14ceb7-31f4-48fd-9565-55c36d26ddce",
								"exec": [
									"pm.test(\"403 status code\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{app_url}}/loads/{{load_id}}/boats/{{boat_id_2}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"loads",
								"{{load_id}}",
								"boats",
								"{{boat_id_2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "check boats/boatid/load/loadid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3c378e9b-bcb5-4db7-9054-0856e6443230",
								"exec": [
									"pm.test(\"200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"At least one load exists on boat\", function(){",
									"   pm.expect(Object.keys(pm.response.json()).length).to.be.at.least(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{boat_id}}/loads",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boat_id}}",
								"loads"
							]
						}
					},
					"response": []
				},
				{
					"name": "put second load on boat",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ea14ceb7-31f4-48fd-9565-55c36d26ddce",
								"exec": [
									"pm.test(\"204 status code\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{app_url}}/loads/{{load_id_2}}/boats/{{boat_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"loads",
								"{{load_id_2}}",
								"boats",
								"{{boat_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "check boats/boatid/load/loadid Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0694d32b-9a22-4327-92f5-4a9dd5afb501",
								"exec": [
									"pm.test(\"200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"At least one load exists on boat\", function(){",
									"   pm.expect(Object.keys(pm.response.json()).length).to.be.at.least(1);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{boat_id}}/loads",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boat_id}}",
								"loads"
							]
						}
					},
					"response": []
				},
				{
					"name": "remove load from boat",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4944c3bb-a37a-4d44-8235-787302d1f7c5",
								"exec": [
									"pm.test(\"204 no content\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/loads/{{load_id}}/boats/{{boat_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"loads",
								"{{load_id}}",
								"boats",
								"{{boat_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "remove fake load from boat",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4944c3bb-a37a-4d44-8235-787302d1f7c5",
								"exec": [
									"pm.test(\"204 no content\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/loads/{{invalid_boat_id}}/boats/{{boat_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"loads",
								"{{invalid_boat_id}}",
								"boats",
								"{{boat_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "remove load from fake boat",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4944c3bb-a37a-4d44-8235-787302d1f7c5",
								"exec": [
									"pm.test(\"204 no content\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/loads/{{invalid_boat_id}}/boats/{{boat_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"loads",
								"{{invalid_boat_id}}",
								"boats",
								"{{boat_id}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "delete boat 204",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2cac53f7-2029-4485-a74e-8660fec6b45b",
								"exec": [
									"pm.test(\"204 no content\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{boat_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boat_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete fake boat",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2cac53f7-2029-4485-a74e-8660fec6b45b",
								"exec": [
									"pm.test(\"404 status code\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{invalid_boat_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{invalid_boat_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete boat 204 Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2cac53f7-2029-4485-a74e-8660fec6b45b",
								"exec": [
									"pm.test(\"204 no content\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{boat_id_2}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boat_id_2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete boat 204 Copy Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2cac53f7-2029-4485-a74e-8660fec6b45b",
								"exec": [
									"pm.test(\"204 no content\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{boat_id_3}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boat_id_3}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete boat 204 Copy Copy Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2cac53f7-2029-4485-a74e-8660fec6b45b",
								"exec": [
									"pm.test(\"204 no content\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{boat_id_4}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boat_id_4}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete load 204",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2cac53f7-2029-4485-a74e-8660fec6b45b",
								"exec": [
									"pm.test(\"204 no content\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/loads/{{load_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"loads",
								"{{load_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete fake load",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2cac53f7-2029-4485-a74e-8660fec6b45b",
								"exec": [
									"pm.test(\"404 status code\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/loads/{{invalid_boat_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"loads",
								"{{invalid_boat_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete load 204 Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2cac53f7-2029-4485-a74e-8660fec6b45b",
								"exec": [
									"pm.test(\"204 no content\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/loads/{{load_id_2}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"loads",
								"{{load_id_2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete load 204 Copy Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2cac53f7-2029-4485-a74e-8660fec6b45b",
								"exec": [
									"pm.test(\"204 no content\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/loads/{{load_id_3}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"loads",
								"{{load_id_3}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete load 204 Copy Copy Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2cac53f7-2029-4485-a74e-8660fec6b45b",
								"exec": [
									"pm.test(\"204 no content\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/loads/{{load_id_4}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"loads",
								"{{load_id_4}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete boat wiht invalid id 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2cac53f7-2029-4485-a74e-8660fec6b45b",
								"exec": [
									"pm.test(\"404 not found\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"pm.test(\"404 error message\", function () {",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id exists\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{invalid_boat_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{invalid_boat_id}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}